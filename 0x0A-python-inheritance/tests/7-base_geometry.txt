The ``7-base_geometry`` Python Module
=====================================

Exploring ``BaseGeometry``
--------------------------

Import the class from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Verify the class type:
    >>> bg_instance = BaseGeometry()
    >>> type(bg_instance) == BaseGeometry
    True


Testing area() Method
---------------------
Check if area is an instance method:
    >>> isinstance(BaseGeometry.__dict__['area'], staticmethod) == False
    True

Invoke area method via class without arguments:
    >>> bg_instance.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

Invoke area method with one argument:
    >>> bg_instance.area(5)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

Invoke area method normally:
    >>> bg_instance.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


Testing integer_validator() Method
----------------------------------
Check if integer_validator is an instance method:
    >>> isinstance(BaseGeometry.__dict__['integer_validator'], staticmethod) == False
    True

Invoke integer_validator method via class without arguments:
    >>> bg_instance.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'

Invoke integer_validator method with zero arguments:
    >>> bg_instance.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    
Invoke integer_validator method with three arguments:
    >>> bg_instance.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Invoke integer_validator method with float.0 value:
    >>> bg_instance.integer_validator("foo", 3.0)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Invoke integer_validator method with float.x value:
    >>> bg_instance.integer_validator("arg", 3.14)
    Traceback (most recent call last):
    TypeError: arg must be an integer

Invoke integer_validator method with string value:
    >>> bg_instance.integer_validator("Bar", "bar")
    Traceback (most recent call last):
    TypeError: Bar must be an integer

Invoke integer_validator method with bool value:
    >>> bg_instance.integer_validator("zar", True)
    Traceback (most recent call last):
    TypeError: zar must be an integer

Invoke integer_validator method with list value:
    >>> bg_instance.integer_validator("a", [1])
    Traceback (most recent call last):
    TypeError: a must be an integer

Invoke integer_validator method with None value:
    >>> bg_instance.integer_validator("foo", None)
    Traceback (most recent call last):
    TypeError: foo must be an integer

Invoke integer_validator method with 0 value:
    >>> bg_instance.integer_validator("key", 0)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

Invoke integer_validator method with negative value:
    >>> bg_instance.integer_validator("key", -1000)
    Traceback (most recent call last):
    ValueError: key must be greater than 0

Invoke integer_validator method with valid value:
    >>> bg_instance.integer_validator("key", 98)
    
Invoke integer_validator method with another valid value:
    >>> bg_instance.integer_validator("key", 1)
